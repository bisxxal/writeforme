generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

 
model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  
  role      Role      @default(USER) // For admin/moderator later if needed
  mode      UserMode  @default(BUYER) // Current active mode (Buyer/Writer)

  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]


  // Relations
  assignmentsBought   Assignment[] @relation("BuyerAssignments")
  assignmentsWritten  Assignment[] @relation("WriterAssignments")
  messages            Message[]    @relation("UserMessages")
  ratingsGiven        Rating[]     @relation("BuyerRatings")
  ratingsReceived     Rating[]     @relation("WriterRatings")
  transactions        Transaction[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([id])
}

model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String
  price       Float
  status      AssignmentStatus @default(PENDING)

  // Relations
  buyerId String?
  buyer   User?      @relation("BuyerAssignments", fields: [buyerId], references: [id])

  writerId String
  writer   User      @relation("WriterAssignments", fields: [writerId], references: [id])

  ratings  Rating[]
  messages Message[]
  transaction Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id           String   @id @default(cuid())
  content      String
  senderId     String
  sender       User     @relation("UserMessages", fields: [senderId], references: [id])

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  createdAt DateTime @default(now())
}

model Rating {
  id        String   @id @default(cuid())
  stars     Int?
  comment   String?

  buyerId   String
  buyer     User     @relation("BuyerRatings", fields: [buyerId], references: [id])

  writerId  String
  writer    User     @relation("WriterRatings", fields: [writerId], references: [id])

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  createdAt DateTime @default(now())
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  assignmentId String
  assignment  Assignment @relation(fields: [assignmentId], references: [id])

  userId      String
  user        User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum UserMode {
  BUYER
  WRITER
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
